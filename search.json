[{"path":"https://dempsey-cmar.github.io/sensorstrings/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://dempsey-cmar.github.io/sensorstrings/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://dempsey-cmar.github.io/sensorstrings/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Danielle Dempsey. Author, maintainer.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dempsey D (2025). sensorstrings: Compile, Format, Visualize Sensor String Data. R package version 1.2.0, https://dempsey-cmar.github.io/sensorstrings/.","code":"@Manual{,   title = {sensorstrings: Compile, Format, and Visualize Sensor String Data},   author = {Danielle Dempsey},   year = {2025},   note = {R package version 1.2.0},   url = {https://dempsey-cmar.github.io/sensorstrings/}, }"},{"path":"https://dempsey-cmar.github.io/sensorstrings/index.html","id":"sensorstrings","dir":"","previous_headings":"","what":"Compile, Format, and Visualize Sensor String Data","title":"Compile, Format, and Visualize Sensor String Data","text":"package replaces strings package. New features: Cleaner code don’t need export intermediate “raw” “trim” files arguments specify templates Additional functions (e.g., ss_download_data()) Variable names consistent Climate Forecast conventions Formal tests helpful Error Warning messages Compile, format, visualize Water Quality (temperature, dissolved oxygen, salinity) data measured different sensors.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Compile, Format, and Visualize Sensor String Data","text":"can install development version sensorstrings GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"dempsey-CMAR/sensorstrings\")"},{"path":"https://dempsey-cmar.github.io/sensorstrings/index.html","id":"package-structure","dir":"","previous_headings":"","what":"Package Structure","title":"Compile, Format, and Visualize Sensor String Data","text":"function tip calls function tail.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/index.html","id":"background","dir":"","previous_headings":"","what":"Background","title":"Compile, Format, and Visualize Sensor String Data","text":"Centre Marine Applied Research (CMAR) coordinates extensive Coastal Monitoring Program measure Essential Ocean Variables around coast Nova Scotia, Canada. three main branches program: Water Quality, Currents, Waves. Processed data branch can viewed downloaded several sources, outlined CMAR Report & Data Access Reference Sheet. sensorstrings package backbone data pipeline Water Quality branch Coastal Monitoring Program. used organize, compile, format, visualize data Water Quality data. Water Quality data (temperature, dissolved oxygen, salinity) collected using stationary moorings referred “sensor strings”. typical sensor string configuration consists rope attached seafloor anchor suspended sub-surface buoy, sensors attached various depths (Figure 1). Alternatively, sensors may attached surface buoys, equipment, floating docks, fixed structures (Figure 1). Figure 1: Sensor string configurations (scale).  sensor strings least one sensor measures temperature, strings also one dissolved oxygen sensor. strings also salinity sensor, typically upon request shellfish aquaculture operators (Table 1). Strings deployed station several months data typically measured every 10 minutes 1 hour, depending sensor. retrieval, data sensor exported separate csv file using manufacturer-specific software. type sensor generates data file unique columns header fields, poses significant challenge compiling data deployment single format analysis. sensorstrings package offers functions compile, format, convert units, visualize sensor string data. sensorstrings developed specifically streamline CMAR’s workflow, flexible enough users can apply process data accepted sensors (Table 1). information Water Quality data collection processing, visit CMAR Water Quality Data Collection & Processing Reference Sheet.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Compile, Format, and Visualize Sensor String Data","text":"Consider string deployed May 31, 2019 October 19, 2019 three sensors:","code":"library(sensorstrings)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/index.html","id":"raw-data-files","dir":"","previous_headings":"Example","what":"Raw data files","title":"Compile, Format, and Visualize Sensor String Data","text":"data sensor saved separate csv file, manufacturer-specific columns. Import raw data files: Examine first rows raw data file:","code":"path <- system.file(\"extdata\", package = \"sensorstrings\")  aquameasure_raw <- ss_read_aquameasure_data(   path = paste0(path, \"/aquameasure\"),   file_name = \"aquameasure-670364.csv\" )  hobo_raw <- ss_read_hobo_data(   path = paste0(path, \"/hobo\"),   file_name = \"10755220.csv\" )  vemco_raw <- ss_read_vemco_data(   path = paste0(path, \"/vemco\"),   file_name = \"vemco-547109.csv\" )"},{"path":"https://dempsey-cmar.github.io/sensorstrings/index.html","id":"aquameasure-data","dir":"","previous_headings":"Example > Raw data files","what":"AquaMeasure data","title":"Compile, Format, and Visualize Sensor String Data","text":"","code":"head(aquameasure_raw) #>                       Timestamp(UTC) Time Corrected(seconds)             Sensor #> 1  209s after startup (time not set)                      NA aquaMeasure-670364 #> 2  353s after startup (time not set)                      NA aquaMeasure-670364 #> 3 1226s after startup (time not set)                      NA aquaMeasure-670364 #> 4 2143s after startup (time not set)                      NA aquaMeasure-670364 #> 5 3006s after startup (time not set)                      NA aquaMeasure-670364 #> 6 3875s after startup (time not set)                      NA aquaMeasure-670364 #>        Record Type Dissolved Oxygen Temperature Device Tilt Battery Voltage #> 1      Device Tilt               NA          NA        90.4              NA #> 2      Temperature               NA       22.68          NA              NA #> 3 Dissolved Oxygen            100.5          NA          NA              NA #> 4      Device Tilt               NA          NA        91.0              NA #> 5      Device Tilt               NA          NA        91.1              NA #> 6 Dissolved Oxygen            100.5          NA          NA              NA #>   TimeSet Time Text #> 1      NA   NA   NA #> 2      NA   NA   NA #> 3      NA   NA   NA #> 4      NA   NA   NA #> 5      NA   NA   NA #> 6      NA   NA   NA"},{"path":"https://dempsey-cmar.github.io/sensorstrings/index.html","id":"hobo-data","dir":"","previous_headings":"Example > Raw data files","what":"Hobo data","title":"Compile, Format, and Visualize Sensor String Data","text":"","code":"head(hobo_raw) #>    # Date Time, GMT+00:00 Temp, °C (LGR S/N: 10755220, SEN S/N: 10755220) V4 #> 1  4     2019-05-30 21:00                                           6.661 NA #> 2  8      2019-05-31 1:00                                           7.695 NA #> 3 12      2019-05-31 5:00                                           7.569 NA #> 4 16      2019-05-31 9:00                                           6.509 NA #> 5 20     2019-05-31 13:00                                           6.788 NA #> 6 24     2019-05-31 17:00                                           6.839 NA #>   Coupler Attached (LGR S/N: 10755220) Host Connected (LGR S/N: 10755220) #> 1                                   NA                                 NA #> 2                                   NA                                 NA #> 3                                   NA                                 NA #> 4                                   NA                                 NA #> 5                                   NA                                 NA #> 6                                   NA                                 NA #>   Stopped (LGR S/N: 10755220) End Of File (LGR S/N: 10755220) #> 1                                                             #> 2                                                             #> 3                                                             #> 4                                                             #> 5                                                             #> 6"},{"path":"https://dempsey-cmar.github.io/sensorstrings/index.html","id":"vemco-data","dir":"","previous_headings":"Example > Raw data files","what":"Vemco data","title":"Compile, Format, and Visualize Sensor String Data","text":"Data sensor exported slightly different layout, making difficult work analyze data single deployment.","code":"head(vemco_raw) #>   Date and Time (UTC)     Receiver    Description  Data Units #> 1    2019-05-30 18:06 VR2AR-547109          Noise 207.6    mV #> 2    2019-05-30 18:10 VR2AR-547109     Tilt angle    89     ° #> 3    2019-05-30 18:13 VR2AR-547109    Temperature  13.6    °C #> 4    2019-05-30 18:17 VR2AR-547109 Seawater depth     0     m #> 5    2019-05-30 18:21 VR2AR-547109          Noise 178.3    mV #> 6    2019-05-30 18:25 VR2AR-547109     Tilt angle    84     °"},{"path":"https://dempsey-cmar.github.io/sensorstrings/index.html","id":"compile-and-format-with-sensorstrings","dir":"","previous_headings":"Example","what":"Compile and format with sensorstrings","title":"Compile, Format, and Visualize Sensor String Data","text":"ss_compile_deployment_data() function makes easy compile files single data frame, additional information added deployment log.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/index.html","id":"deployment-log","dir":"","previous_headings":"Example > Compile and format with sensorstrings","what":"Deployment Log","title":"Compile, Format, and Visualize Sensor String Data","text":"deployment log includes deployment retrieval dates, information string deployed, depth sensor.","code":"log <- ss_read_log(path) #> ✔ Reading from \"STRING TRACKING\". #> ✔ Range ''Area Info''. log$deployment_dates #>   start_date   end_date #> 1 2019-05-30 2019-10-19 log$area_info #>    county waterbody latitude longitude        station lease #> 1 Halifax Shoal Bay 44.77241 -62.72608 Borgles Island    NA log$sn_table #> # A tibble: 3 × 3 #>   log_sensor      sensor_serial_number depth #>   <chr>                          <dbl> <dbl> #> 1 HOBO Pro V2                 10755220     2 #> 2 aquaMeasure DOT               670364     5 #> 3 VR2AR                         547109    15"},{"path":"https://dempsey-cmar.github.io/sensorstrings/index.html","id":"compile-data","dir":"","previous_headings":"Example > Compile and format with sensorstrings","what":"Compile Data","title":"Compile, Format, and Visualize Sensor String Data","text":"ss_compile_deployment_data() reads log data sensor exports single data frame.","code":"dat <- ss_compile_deployment_data(path) #> ✔ Reading from \"STRING TRACKING\". #> ✔ Range ''Area Info''. #> aquameasure data compiled #> hobo data compiled #> vemco data from sensor <<  547109  >> compiled: Temperature & Seawater depth  kable(dat[1:10, ])"},{"path":"https://dempsey-cmar.github.io/sensorstrings/index.html","id":"plot","dir":"","previous_headings":"Example","what":"Plot","title":"Compile, Format, and Visualize Sensor String Data","text":"","code":"ss_ggplot_variables(dat)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/add_deployment_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Add and reorder columns — add_deployment_columns","title":"Add and reorder columns — add_deployment_columns","text":"Add deployment_range, sensor_type, sensor_serial number columns. Rename depth column sensor_depth_at_low_tide_m.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/add_deployment_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add and reorder columns — add_deployment_columns","text":"","code":"add_deployment_columns(dat, start_date, end_date, sn_table)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/add_deployment_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add and reorder columns — add_deployment_columns","text":"dat placeholder start_date placeholder end_date placeholder sn_table data frame three columns: sensor_type, sensor_serial_number, depth.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/add_deployment_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add and reorder columns — add_deployment_columns","text":"returns dat additional columns","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/check_n_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Check number of rows of data file — check_n_rows","title":"Check number of rows of data file — check_n_rows","text":"Check number rows data file","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/check_n_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check number of rows of data file — check_n_rows","text":"","code":"check_n_rows(dat, file_name, trimmed = TRUE)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/check_n_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check number of rows of data file — check_n_rows","text":"dat Data frame. Error returned 0 rows data. file_name Name file checked, e.g., csv file read dat. Used Error message pinpoint problematic file. trimmed Logical value indicating dat trimmed.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/check_n_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check number of rows of data file — check_n_rows","text":"Returns Error rows dat.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/convert_timestamp_to_datetime.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert timestamp to datetime — convert_timestamp_to_datetime","title":"Convert timestamp to datetime — convert_timestamp_to_datetime","text":"Convert timestamp datetime","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/convert_timestamp_to_datetime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert timestamp to datetime — convert_timestamp_to_datetime","text":"","code":"convert_timestamp_to_datetime(dat)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/convert_timestamp_to_datetime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert timestamp to datetime — convert_timestamp_to_datetime","text":"dat Data frame least one column, timestamp_ datetimes character values.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/convert_timestamp_to_datetime.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert timestamp to datetime — convert_timestamp_to_datetime","text":"Converts timestamp_ column POSIXct object. Every datetime   entry must order.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/extract_aquameasure_tz.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the timezone of aquameasure timestamps — extract_aquameasure_tz","title":"Extract the timezone of aquameasure timestamps — extract_aquameasure_tz","text":"Extract timezone aquameasure timestamps","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/extract_aquameasure_tz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the timezone of aquameasure timestamps — extract_aquameasure_tz","text":"","code":"extract_aquameasure_tz(am_colnames)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/extract_aquameasure_tz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the timezone of aquameasure timestamps — extract_aquameasure_tz","text":"am_colnames Column names aquameasure data file.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/extract_aquameasure_tz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the timezone of aquameasure timestamps — extract_aquameasure_tz","text":"Returns character string timezone indicated Timestamp   column.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/extract_aquameasure_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the variables included in aquameasure file from the column names — extract_aquameasure_vars","title":"Extract the variables included in aquameasure file from the column names — extract_aquameasure_vars","text":"Extract variables included aquameasure file column names","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/extract_aquameasure_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the variables included in aquameasure file from the column names — extract_aquameasure_vars","text":"","code":"extract_aquameasure_vars(am_colnames)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/extract_aquameasure_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the variables included in aquameasure file from the column names — extract_aquameasure_vars","text":"am_colnames Column names aquameasure data file.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/extract_aquameasure_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the variables included in aquameasure file from the column names — extract_aquameasure_vars","text":"Returns vector variables included file.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/extract_deployment_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract deployment dates — extract_deployment_dates","title":"Extract deployment dates — extract_deployment_dates","text":"Extract deployment dates","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/extract_deployment_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract deployment dates — extract_deployment_dates","text":"","code":"extract_deployment_dates(deployment_dates)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/extract_deployment_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract deployment dates — extract_deployment_dates","text":"deployment_dates Data frame two columns; first column holds deployment date, second column holds retrieval date.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/extract_file_extension.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the extension of a file name — extract_file_extension","title":"Extracts the extension of a file name — extract_file_extension","text":"Extracts extension file name","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/extract_file_extension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the extension of a file name — extract_file_extension","text":"","code":"extract_file_extension(file_name)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/extract_file_extension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the extension of a file name — extract_file_extension","text":"file_name Character string file name path. Must include one \".\", used separator.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/extract_file_extension.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extracts the extension of a file name — extract_file_extension","text":"Extracts file extension character string using \"\\.\"   separator.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/extract_hobo_sn.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract hobo serial number from the data file — extract_hobo_sn","title":"Extract hobo serial number from the data file — extract_hobo_sn","text":"Extract hobo serial number data file","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/extract_hobo_sn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract hobo serial number from the data file — extract_hobo_sn","text":"","code":"extract_hobo_sn(hobo_colnames)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/extract_hobo_sn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract hobo serial number from the data file — extract_hobo_sn","text":"hobo_colnames Column names hobo file, imported ss_read_hobo_data().","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/extract_hobo_sn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract hobo serial number from the data file — extract_hobo_sn","text":"Returns hobo serial number.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/extract_hobo_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract units from column names of hobo data — extract_hobo_units","title":"Extract units from column names of hobo data — extract_hobo_units","text":"Extract units column names hobo data","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/extract_hobo_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract units from column names of hobo data — extract_hobo_units","text":"","code":"extract_hobo_units(hobo_dat)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/extract_hobo_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract units from column names of hobo data — extract_hobo_units","text":"hobo_dat Data read ss_read_hobo_data().","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/extract_hobo_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract units from column names of hobo data — extract_hobo_units","text":"Returns tibble variable units found   hobo_dat. Units mg_per_l dissolved oxygen degree_c   temperature.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/extract_vemco_tz.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the timezone of vemco timestamps — extract_vemco_tz","title":"Extract the timezone of vemco timestamps — extract_vemco_tz","text":"Extract timezone vemco timestamps","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/extract_vemco_tz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the timezone of vemco timestamps — extract_vemco_tz","text":"","code":"extract_vemco_tz(dat_colnames)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/extract_vemco_tz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the timezone of vemco timestamps — extract_vemco_tz","text":"dat_colnames Column names vemco file.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/extract_vemco_tz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the timezone of vemco timestamps — extract_vemco_tz","text":"Returns character string timezone indicated Timestamp   column.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/filter_dat_to_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter data before plotting to zoom in on interesting features — filter_dat_to_plot","title":"Filter data before plotting to zoom in on interesting features — filter_dat_to_plot","text":"Called ss_open_trimdates_app().","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/filter_dat_to_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter data before plotting to zoom in on interesting features — filter_dat_to_plot","text":"","code":"filter_dat_to_plot(   dat,   filter_to = c(\"start\", \"end\", \"custom\"),   period = \"2 days\",   custom_start = NULL,   custom_end = NULL )"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/filter_dat_to_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter data before plotting to zoom in on interesting features — filter_dat_to_plot","text":"dat Data frame sensor string data wide format, exported ss_compile_deployment_data(). Must include columns timestamp_, sensor_depth_at_low_tide_m, sensor_type, sensor-serial number, variables plot (e.g., temperature_degree_c). filter_to Shortcut specifying filter dat plotting. Options \"start\", \"end\", \"custom\". period Character string can converted lubridate period. Default \"2 days\". custom_start required filter_to = \"custom\". POSIXct object indicating filtered data begin. custom_end required filter_to = \"custom\". POSIXct object indicating filtered data end.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/filter_dat_to_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter data before plotting to zoom in on interesting features — filter_dat_to_plot","text":"Returns dat filtered specified dates.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/make_column_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Glue variable name and units to create column names — make_column_names","title":"Glue variable name and units to create column names — make_column_names","text":"Glue variable name units create column names","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/make_column_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Glue variable name and units to create column names — make_column_names","text":"","code":"make_column_names(unit_table)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/make_column_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Glue variable name and units to create column names — make_column_names","text":"unit_table Data frame including columns variable units, returned extract_hobo_units().","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/make_column_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Glue variable name and units to create column names — make_column_names","text":"Data frame column names form variable_units.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/set_up_compile.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up parameters, Errors, and Warnings for the compile_** functions — set_up_compile","title":"Set up parameters, Errors, and Warnings for the compile_** functions — set_up_compile","text":"Set parameters, Errors, Warnings compile_** functions","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/set_up_compile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up parameters, Errors, and Warnings for the compile_** functions — set_up_compile","text":"","code":"set_up_compile(path, sn_table, deployment_dates, sensor_make)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/set_up_compile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up parameters, Errors, and Warnings for the compile_** functions — set_up_compile","text":"path File path folder aquameasure, hobo, tidbit, vemco folder. sn_table data frame three columns: sensor_type, sensor_serial_number, depth. deployment_dates data frame two columns. first column holds deployment date (Date object, POSIXct object, character string order year, month, day), second column holds retrieval date (Date object, POSIXct object, character string order year, month, day). sensor_make Make sensor compiled. match name folder raw data files. common entries \"aquameasure\", \"hobo\", \"vemco\".","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/set_up_compile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up parameters, Errors, and Warnings for the compile_** functions — set_up_compile","text":"Returns list parameters used compile_** functions:   final path folder interest, deployment dates, vector files   folder, sn_table.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/set_up_compile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set up parameters, Errors, and Warnings for the compile_** functions — set_up_compile","text":"column named sensor_type added sn_table,   values sensor_make. sensor_type column added   compiled data (e.g., \"aquameasure\", \"hobo\", \"vr2ar\" vs \"HOBO PRO V2\"   \"aquaMeasure DOT\"). Returns Errors Warnings expected files found   path.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_assemble_region_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Assemble region data — ss_assemble_region_data","title":"Assemble region data — ss_assemble_region_data","text":"Assemble region data","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_assemble_region_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assemble region data — ss_assemble_region_data","text":"","code":"ss_assemble_region_data(prov = \"ns\", folder)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_assemble_region_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assemble region data — ss_assemble_region_data","text":"prov Character string indicating province data assembled . Options \"ns\" (default) \"nb\". dicates file path data exported CMAR R drive. folder Name folder rds files saved.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_assemble_region_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assemble region data — ss_assemble_region_data","text":"Returns data.frame data deployments folder.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_check_station_drift.html","id":null,"dir":"Reference","previous_headings":"","what":"Check station deployment and retrieval locations are within acceptable distance — ss_check_station_drift","title":"Check station deployment and retrieval locations are within acceptable distance — ss_check_station_drift","text":"Check station deployment retrieval locations within acceptable distance","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_check_station_drift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check station deployment and retrieval locations are within acceptable distance — ss_check_station_drift","text":"","code":"ss_check_station_drift(   log_coords,   log_crs = 4617,   max_drift = 100,   return_drift = FALSE )"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_check_station_drift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check station deployment and retrieval locations are within acceptable distance — ss_check_station_drift","text":"log_coords Data frame five columns: station, latitude longitude (coordinates recorded deployment) retrieval_latitude retrieval_longitude (coordinates recorded retrieval). log_crs crs coordinates log_coords. max_drift maximum acceptable distance deployment retrieval coordinates metres. return_drift Logical argument indicating whether return drift distance.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_check_station_drift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check station deployment and retrieval locations are within acceptable distance — ss_check_station_drift","text":"Logical value. Returns TRUE distance deployment   retrieval coordinates less max_drift. Returns   FALSE Warning distance greater.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_check_station_in_ocean.html","id":null,"dir":"Reference","previous_headings":"","what":"Check station location is in the ocean (not on land) — ss_check_station_in_ocean","title":"Check station location is in the ocean (not on land) — ss_check_station_in_ocean","text":"Check station location ocean (land)","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_check_station_in_ocean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check station location is in the ocean (not on land) — ss_check_station_in_ocean","text":"","code":"ss_check_station_in_ocean(log_coords, log_crs = 4617, coast_shp = NULL)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_check_station_in_ocean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check station location is in the ocean (not on land) — ss_check_station_in_ocean","text":"log_coords Data frame three columns: station, latitude longitude, .e., station coordinates recorded deployment log. log_crs crs coordinates log_coords. coast_shp Shapefile coast comparison station location. resolution shapefile can impact results test. Coarse resolution may result false positives overlapping land. NULL, must connected Perennia R drive.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_check_station_in_ocean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check station location is in the ocean (not on land) — ss_check_station_in_ocean","text":"Logical value. Returns TRUE log coordinates   ocean. Returns FALSE Warning coordinates overlap   land.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_check_station_radius.html","id":null,"dir":"Reference","previous_headings":"","what":"Check station location is within buffer of official coordinates — ss_check_station_radius","title":"Check station location is within buffer of official coordinates — ss_check_station_radius","text":"Check station location within buffer official coordinates","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_check_station_radius.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check station location is within buffer of official coordinates — ss_check_station_radius","text":"","code":"ss_check_station_radius(   log_coords,   log_crs = 4617,   station_coords = NULL,   station_radius = 500 )"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_check_station_radius.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check station location is within buffer of official coordinates — ss_check_station_radius","text":"log_coords Data frame three columns: station, latitude longitude, .e., station coordinates recorded deployment log. log_crs crs coordinates log_coords. station_coords Data frame two columns: latitude longitude, \"official\" station coordinates. NULL, station coordinates looked AREA INFO tracking sheet. station_radius Acceptable radius around official station coordinates (metres). Stations outside radius renamed. Default 500 m.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_check_station_radius.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check station location is within buffer of official coordinates — ss_check_station_radius","text":"Logical value. Returns TRUE log coordinates within   buffer radius. Returns FALSE Warning coordinates   outside buffer.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_compile_aquameasure_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile data from aquameasure sensors — ss_compile_aquameasure_data","title":"Compile data from aquameasure sensors — ss_compile_aquameasure_data","text":"Compile format temperature, dissolved oxygen, salinity,   /device depth data aquameasure sensors.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_compile_aquameasure_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile data from aquameasure sensors — ss_compile_aquameasure_data","text":"","code":"ss_compile_aquameasure_data(path, sn_table, deployment_dates, trim = TRUE)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_compile_aquameasure_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compile data from aquameasure sensors — ss_compile_aquameasure_data","text":"path File path hobo tidbit folder. sn_table data frame three columns: sensor_type, sensor_serial_number, depth. deployment_dates data frame two columns. first column holds deployment date (Date object, POSIXct object, character string order year, month, day), second column holds retrieval date (Date object, POSIXct object, character string order year, month, day). trim Logical value indicating whether trim data dates specified deployment_dates. (Note: four hours added retrieval date account AST, e.g., case sensor retrieved 20:00 AST, 00:00 UTC next day.) Default trim = TRUE.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_compile_aquameasure_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compile data from aquameasure sensors — ss_compile_aquameasure_data","text":"Returns tibble compiled data aquameasure   files saved path/aquameasure.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_compile_aquameasure_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compile data from aquameasure sensors — ss_compile_aquameasure_data","text":"raw aquameasure data must saved folder named aquameasure   csv format. Folder name case-sensitive. Rows undefined ... (time set) values   Timestamp(UTC) column filtered . timestamp columns must order \"ymd IMS p\", \"Ymd IMS p\", \"Ymd   HM\", \"Ymd HMS\", \"dmY HM\", \"dmY HMS\". \"ERR\" values converted -111 (distinguish sensor error   value -101.5).","code":""},{"path":[]},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_compile_aquameasure_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compile data from aquameasure sensors — ss_compile_aquameasure_data","text":"Danielle Dempsey","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_compile_deployment_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile aquameasure, hobo, tidbit, and vemco data from a single deployment — ss_compile_deployment_data","title":"Compile aquameasure, hobo, tidbit, and vemco data from a single deployment — ss_compile_deployment_data","text":"Compile aquameasure, hobo, tidbit, vemco data single   deployment","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_compile_deployment_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile aquameasure, hobo, tidbit, and vemco data from a single deployment — ss_compile_deployment_data","text":"","code":"ss_compile_deployment_data(   path,   trim = TRUE,   ignore_sensors = NULL,   depth_override = NULL )"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_compile_deployment_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compile aquameasure, hobo, tidbit, and vemco data from a single deployment — ss_compile_deployment_data","text":"path File path log, aquameasure, hobo, tidbit, /vemco folders. trim Logical value indicating whether trim data dates specified deployment_dates. (Note: four hours added retrieval date account AST, e.g., case sensor retrieved 20:00 AST, 00:00 UTC next day.) Default trim = TRUE. ignore_sensors Vector sensor serial numbers sensors deployment log, compiled (e.g., data file missing). depth_override optional character string indicating depth variable compile. files (e.g., Borgles Island 2018-02-28), one \"Seawater depth\" observation, full deployment \"Average seawater depth\" observations. case, force code compile average seawater depth depth_override = Average seawater depth.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_compile_deployment_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compile aquameasure, hobo, tidbit, and vemco data from a single deployment — ss_compile_deployment_data","text":"Returns data frame data sensor string deployment.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_compile_deployment_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compile aquameasure, hobo, tidbit, and vemco data from a single deployment — ss_compile_deployment_data","text":"Reads deployment log calls   ss_compile_aquameasure_data(), ss_compile_hobo_data(),   ss_compile_vemco_data() returns results single data   frame. aquameasure data must folder named aquameasure, hobo data must   folder named hobo, tidbit data must folder named tidbit,   vemco data must folder name vemco (folder names case   sensitive). aquameasure, hobo, tidbit, vemco folders must   folder. Columns deployment details added (e.g., county, waterbody,   latitude, longitude, station, lease, string_configuration).","code":""},{"path":[]},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_compile_deployment_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compile aquameasure, hobo, tidbit, and vemco data from a single deployment — ss_compile_deployment_data","text":"Danielle Dempsey","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_compile_hobo_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile and format data from hobo or tidbit sensors — ss_compile_hobo_data","title":"Compile and format data from hobo or tidbit sensors — ss_compile_hobo_data","text":"Compile format data hobo tidbit sensors","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_compile_hobo_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile and format data from hobo or tidbit sensors — ss_compile_hobo_data","text":"","code":"ss_compile_hobo_data(   path,   sn_table,   deployment_dates,   trim = TRUE,   sensor_make = \"hobo\" )"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_compile_hobo_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compile and format data from hobo or tidbit sensors — ss_compile_hobo_data","text":"path File path hobo tidbit folder. sn_table data frame three columns: sensor_type, sensor_serial_number, depth. deployment_dates data frame two columns. first column holds deployment date (Date object, POSIXct object, character string order year, month, day), second column holds retrieval date (Date object, POSIXct object, character string order year, month, day). trim Logical value indicating whether trim data dates specified deployment_dates. (Note: four hours added retrieval date account AST, e.g., case sensor retrieved 20:00 AST, 00:00 UTC next day.) Default trim = TRUE. sensor_make Character string indicating whether data compiled hobo sensors (default) tidbit sensors. used fill sensor_type column output file. raw file format type sensor.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_compile_hobo_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compile and format data from hobo or tidbit sensors — ss_compile_hobo_data","text":"Returns tibble data compiled hobo   tidbit sensors.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_compile_hobo_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compile and format data from hobo or tidbit sensors — ss_compile_hobo_data","text":"code correct dissolved oxygen data salinity. Exported hobo data must saved folder named hobo csv format. Exported tidbit data must saved folder named tidbit csv format. Folder name case-sensitive. csv files hobo tidbit folder compiled. name file must serial number sensor. timestamp columns must order \"ymd IMS p\", \"Ymd IMS p\", \"Ymd HM\", \"Ymd HMS\", \"dmY HM\", \"dmY HMS\".","code":""},{"path":[]},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_compile_hobo_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compile and format data from hobo or tidbit sensors — ss_compile_hobo_data","text":"Danielle Dempsey","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_compile_vemco_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Format temperature data from Vemco deployment — ss_compile_vemco_data","title":"Format temperature data from Vemco deployment — ss_compile_vemco_data","text":"Compiles formats temperature seawater depth data   VR2AR sensors.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_compile_vemco_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format temperature data from Vemco deployment — ss_compile_vemco_data","text":"","code":"ss_compile_vemco_data(   path,   sn_table,   deployment_dates,   trim = TRUE,   depth_override = NULL )"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_compile_vemco_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format temperature data from Vemco deployment — ss_compile_vemco_data","text":"path File path vemco folder. folder one csv file extracted using Vue software. file types folder ignored. sn_table data frame three columns: sensor_type, sensor_serial_number, depth. deployment_dates data frame two columns. first column holds deployment date (Date object, POSIXct object, character string order year, month, day), second column holds retrieval date (Date object, POSIXct object, character string order year, month, day). trim Logical value indicating whether trim data dates specified deployment_dates. (Note: four hours added retrieval date account AST, e.g., case sensor retrieved 20:00 AST, 00:00 UTC next day.) Default trim = TRUE. depth_override optional character string indicating depth variable compile. files (e.g., Borgles Island 2018-02-28), one \"Seawater depth\" observation, full deployment \"Average seawater depth\" observations. case, force code compile average seawater depth depth_override = Average seawater depth.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_compile_vemco_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format temperature data from Vemco deployment — ss_compile_vemco_data","text":"Returns tibble data compiled file path/vemco.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_compile_vemco_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format temperature data from Vemco deployment — ss_compile_vemco_data","text":"raw vemco data must saved folder named vemco csv   format. Folder name case-sensitive. \"Temperature\" entries Description column,   extracted compiled. \"Temperature\" entries,   \"Average temperature\" entries, extracted compiled.   Otherwise, function stop error message. \"Seawater depth\" entries Description column,   extracted compiled. \"Seawater depth\" entries,   \"Average seawater depth\" entries, extracted   compiled. Otherwise, function stop error message.  (See   argument depth_override exception.)","code":""},{"path":[]},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_compile_vemco_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Format temperature data from Vemco deployment — ss_compile_vemco_data","text":"Danielle Dempsey","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_convert_depth_to_ordered_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts values in the depth column to an ordered factor — ss_convert_depth_to_ordered_factor","title":"Converts values in the depth column to an ordered factor — ss_convert_depth_to_ordered_factor","text":"function simplifies converting   sensor_depth_at_low_tide_m column class numeric, factor,   character ordered factor, preferred using   function ss_ggplot_variables().","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_convert_depth_to_ordered_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts values in the depth column to an ordered factor — ss_convert_depth_to_ordered_factor","text":"","code":"ss_convert_depth_to_ordered_factor(dat)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_convert_depth_to_ordered_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts values in the depth column to an ordered factor — ss_convert_depth_to_ordered_factor","text":"dat Data frame includes column sensor_depth_at_low_tide_m.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_convert_depth_to_ordered_factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts values in the depth column to an ordered factor — ss_convert_depth_to_ordered_factor","text":"Returns dat, sensor_depth_at_low_tide_m column   converted ordered factor. shallowest depth factor   value 1; deepest depth largest factor value.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_convert_depth_to_ordered_factor.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Converts values in the depth column to an ordered factor — ss_convert_depth_to_ordered_factor","text":"Danielle Dempsey","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_convert_old_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert column names from old log into the new format — ss_convert_old_log","title":"Convert column names from old log into the new format — ss_convert_old_log","text":"Convert column names old log new format","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_convert_old_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert column names from old log into the new format — ss_convert_old_log","text":"","code":"ss_convert_old_log(log)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_convert_old_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert column names from old log into the new format — ss_convert_old_log","text":"log Log file read ss_read_log().","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_convert_old_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert column names from old log into the new format — ss_convert_old_log","text":"Returns log columns names matching head   read ","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_coords_from_ddm_to_dd.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert coordinates from degree-minute-decimal to decimal degree — ss_coords_from_ddm_to_dd","title":"Convert coordinates from degree-minute-decimal to decimal degree — ss_coords_from_ddm_to_dd","text":"apply multiple columns using dplyr::across:","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_coords_from_ddm_to_dd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert coordinates from degree-minute-decimal to decimal degree — ss_coords_from_ddm_to_dd","text":"","code":"ss_coords_from_ddm_to_dd(coords_ddm)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_coords_from_ddm_to_dd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert coordinates from degree-minute-decimal to decimal degree — ss_coords_from_ddm_to_dd","text":"coords_ddm Vector coordinate values degree decimal minutes (xx xx.xxxx, e.g., 45 21.651 64 2.063). converted decimal degrees.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_coords_from_ddm_to_dd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert coordinates from degree-minute-decimal to decimal degree — ss_coords_from_ddm_to_dd","text":"Returns vector coordinates decimal-degree format.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_coords_from_ddm_to_dd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert coordinates from degree-minute-decimal to decimal degree — ss_coords_from_ddm_to_dd","text":"1. Define variables convert: coords_ddm <- c(\"deployment_latitude_n_ddm\", \"deployment_longitude_w_ddm\", \"retrieval_latitude_n_ddm\", \"retrieval_longitude_w_ddm\") 2. Use .names argument specify new column names original columns -written: dat <- dat_raw  ~ss_coords_from_ddm_to_dd(.x), .names = \"{str_remove(.col, '_w_ddm|_n_ddm')}\" ))","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_create_log_from_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Writes a deployment log from the metadata tracking sheet — ss_create_log_from_metadata","title":"Writes a deployment log from the metadata tracking sheet — ss_create_log_from_metadata","text":"Writes deployment log metadata tracking sheet","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_create_log_from_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Writes a deployment log from the metadata tracking sheet — ss_create_log_from_metadata","text":"","code":"ss_create_log_from_metadata(   path_metadata = NULL,   sheet = \"tracker\",   path_export,   station,   deployment_date,   to_title = TRUE )"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_create_log_from_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Writes a deployment log from the metadata tracking sheet — ss_create_log_from_metadata","text":"path_metadata Path metadata tracking sheet (including file name extension). must .xlsx file. sheet Name tab deployment information. path_export Path station deployment folder. station Station name. deployment_date Date deployment character string format \"YYYY-mm-dd\" to_title Logical argument indicating whether convert station name title case. Default TRUE. Set FALSE stations capital letters within word, e.g., McNabs Island.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_create_log_from_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Writes a deployment log from the metadata tracking sheet — ss_create_log_from_metadata","text":"Returns deployment log .csv format.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_create_log_from_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Writes a deployment log from the metadata tracking sheet — ss_create_log_from_metadata","text":"Imports NSDFA tracking sheet, filters station date   interest, re-formats deployment log format, exports   Log folder.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_create_variable_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Create plot labels from variable names — ss_create_variable_labels","title":"Create plot labels from variable names — ss_create_variable_labels","text":"Create plot labels variable names","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_create_variable_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create plot labels from variable names — ss_create_variable_labels","text":"","code":"ss_create_variable_labels(dat)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_create_variable_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create plot labels from variable names — ss_create_variable_labels","text":"dat Data frame Water Quality data variables long format. Entries variable column must dissolved_oxygen_percent_saturation, dissolved_oxygen_uncorrected_mg_per_l, salinity_psu, sensor_depth_measured_m, temperature_degree_c.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_create_variable_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create plot labels from variable names — ss_create_variable_labels","text":"Returns dat_long addition column   variable_label. variable_label","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_create_variable_labels_no_newline.html","id":null,"dir":"Reference","previous_headings":"","what":"Create plot labels from variable names without new lines — ss_create_variable_labels_no_newline","title":"Create plot labels from variable names without new lines — ss_create_variable_labels_no_newline","text":"Create plot labels variable names without new lines","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_create_variable_labels_no_newline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create plot labels from variable names without new lines — ss_create_variable_labels_no_newline","text":"","code":"ss_create_variable_labels_no_newline(dat)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_create_variable_labels_no_newline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create plot labels from variable names without new lines — ss_create_variable_labels_no_newline","text":"dat Data frame Water Quality data variables long format. Entries variable column must dissolved_oxygen_percent_saturation, dissolved_oxygen_uncorrected_mg_per_l, salinity_psu, sensor_depth_measured_m, temperature_degree_c.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_create_variable_labels_no_newline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create plot labels from variable names without new lines — ss_create_variable_labels_no_newline","text":"Returns dat_long addition column   variable_label. variable_label","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_download_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Download deployment data from Google drive to the shared CMAR server — ss_download_data","title":"Download deployment data from Google drive to the shared CMAR server — ss_download_data","text":"Download deployment data Google drive shared CMAR server","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_download_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download deployment data from Google drive to the shared CMAR server — ss_download_data","text":"","code":"ss_download_data(path, station, depl_date)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_download_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download deployment data from Google drive to the shared CMAR server — ss_download_data","text":"path File path deployment folder CMAR server (created ss_set_up_folders()). station Station name. match name folder CMAR Google drive, CMAR - Coastal Monitoring Program/CMP Station Data depl_date Deployment date (character string). name one deployment folders.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_download_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download deployment data from Google drive to the shared CMAR server — ss_download_data","text":"Downloads files Google drive corresponding folder   CMAR server.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_export_county_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Export data into a csv and/or rds file — ss_export_county_files","title":"Export data into a csv and/or rds file — ss_export_county_files","text":"Export data csv /rds file","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_export_county_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export data into a csv and/or rds file — ss_export_county_files","text":"","code":"ss_export_county_files(   dat,   county = \"\",   output_path = NULL,   export_csv = TRUE,   export_rds = TRUE )"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_export_county_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export data into a csv and/or rds file — ss_export_county_files","text":"dat Dataframe exported, e.g., output export_county_data(). county County name. appended today's date name output file. output_path Path assembled file(s) exported. default export csv file open_data folder rds file processed_data/assembled_data folder (R drive). custom output_path entries, csv rds files exported folder. export_csv Logical argument indicating whether data   exported csv file. File name county_todays-date.csv. Default   TRUE. Note: timestamp_utc converted character exporting   remove UTC formatting (2018-12-23T05:00:00Z). re-imported R,   UTC timezone can added using  lubridate::force_tz(). NAs exported blank cells request Open Data Portal. export_rds Logical argument indicating whether assembled data exported *.rds file. File name county_todays-date.rds. Default TRUE.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_export_county_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export data into a csv and/or rds file — ss_export_county_files","text":"Exports dat csv /rds file.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_export_county_files.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Export data into a csv and/or rds file — ss_export_county_files","text":"Danielle Dempsey","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_export_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate file path and name to export compiled sensor string data — ss_export_path","title":"Generate file path and name to export compiled sensor string data — ss_export_path","text":"Generate file path name export compiled sensor string data","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_export_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate file path and name to export compiled sensor string data — ss_export_path","text":"","code":"ss_export_path(dat, prov = \"ns\", sub_folder = NULL, ext = \"rds\")"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_export_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate file path and name to export compiled sensor string data — ss_export_path","text":"dat Data frame sensor string data wide long format. Must include columns county, station, deployment_range. prov Character string indicating province deployment . Options \"ns\" (default) \"nb\". dicates file path data exported CMAR R drive. sub_folder Character string sub-folder name (inside county folder) dat exported. Default sub-folder = \"new\". ext File extension. Default ext = \"rds\".","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_export_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate file path and name to export compiled sensor string data — ss_export_path","text":"file path exporting deployment data, including file name   extension.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_get_colour_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns colour palette based on the unique values of sensor_depth_at_low_tide_m — ss_get_colour_palette","title":"Returns colour palette based on the unique values of sensor_depth_at_low_tide_m — ss_get_colour_palette","text":"Returns colour palette based unique values sensor_depth_at_low_tide_m","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_get_colour_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns colour palette based on the unique values of sensor_depth_at_low_tide_m — ss_get_colour_palette","text":"","code":"ss_get_colour_palette(dat)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_get_colour_palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns colour palette based on the unique values of sensor_depth_at_low_tide_m — ss_get_colour_palette","text":"dat Data frame least one column. column name must include string \"low_tide\".","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_get_colour_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns colour palette based on the unique values of sensor_depth_at_low_tide_m — ss_get_colour_palette","text":"Returns vector hex colours viridis palette (Option D,   direction = -1).","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_get_colour_palette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Returns colour palette based on the unique values of sensor_depth_at_low_tide_m — ss_get_colour_palette","text":"Returns discrete colour scale palette viridis package   (Option D). 6 less unique values   sensor_depth_at_low_tide_m, palette 6 colours.   6 unique values sensor_depth_at_low_tide_m,   one colour depth.","code":""},{"path":[]},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_get_colour_palette.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Returns colour palette based on the unique values of sensor_depth_at_low_tide_m — ss_get_colour_palette","text":"Danielle Dempsey","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_ggplot_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot variables at depth — ss_ggplot_variables","title":"Plot variables at depth — ss_ggplot_variables","text":"Plot variables depth","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_ggplot_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot variables at depth — ss_ggplot_variables","text":"","code":"ss_ggplot_variables(   dat,   superchill = NULL,   color_palette = NULL,   color_col = \"sensor_depth_at_low_tide_m\",   legend_name = \"Depth (m)\",   legend_position = \"right\",   date_breaks_major = NULL,   date_breaks_minor = NULL,   date_labels_format = \"%Y-%m-%d\",   axis_label_newline = TRUE,   point_size = 0.25 )"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_ggplot_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot variables at depth — ss_ggplot_variables","text":"dat Data frame sensor string data wide long format. superchill Logical argument indicating whether adding shading indicate temperatures superchill threshold (<= - 0.7 degrees C). superchill = NULL (default), shading applied temperature values less equal threshold. color_palette Optional vector hex colors onto depth mapped. color_col Character string indicating column use colour observations. legend_name Name depth legend. Default legend_name = \"Depth (m)\". legend_position Position depth legend. Default legend.position = \"right\". date_breaks_major Intervals major breaks. Default selected get_xaxis_breaks(). date_breaks_minor Intervals minor breaks. Default selected get_xaxis_breaks(). date_labels_format Format date labels. Default YYYY-mm-dd. axis_label_newline Logical argument indicating whether put units new line. point_size Numeric value indicating size points.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_ggplot_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot variables at depth — ss_ggplot_variables","text":"Returns ggplot object ocean variables plotted time   coloured sensor depth.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_import_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Import Water Quality data from rds files — ss_import_data","title":"Import Water Quality data from rds files — ss_import_data","text":"Import Water Quality data rds files","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_import_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import Water Quality data from rds files — ss_import_data","text":"","code":"ss_import_data(input_path = NULL, county = \"all\")"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_import_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import Water Quality data from rds files — ss_import_data","text":"input_path Path *.rds files assembled. Default assembled_data folder CMAR R drive (user must connected Perennia VPN). county Vector character string(s) indicating county counties import data. efficiency, filter applied file path, county name MUST part file path. Defaults counties.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_import_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate file path to import raw sensor string deployment data — ss_import_path","title":"Generate file path to import raw sensor string deployment data — ss_import_path","text":"Raw data must saved folder path/station/station_yyyy-mm-dd.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_import_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate file path to import raw sensor string deployment data — ss_import_path","text":"","code":"ss_import_path(station, depl_date, prov = \"ns\")"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_import_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate file path to import raw sensor string deployment data — ss_import_path","text":"station Character string station name. converted lower case, spaces replaced underscore. depl_date Character string deployment data order yyyy-mm-dd. prov Character string indicating province deployment . Options \"ns\" (default) \"nb\". dicates file path data imported CMAR R drive.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_import_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate file path to import raw sensor string deployment data — ss_import_path","text":"file path importing raw deployment data.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_open_trimdates_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Open interactive plot — ss_open_trimdates_app","title":"Open interactive plot — ss_open_trimdates_app","text":"Open interactive plot","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_open_trimdates_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open interactive plot — ss_open_trimdates_app","text":"","code":"ss_open_trimdates_app(   dat,   filter_to = c(\"start\", \"end\", \"custom\"),   period = \"2 days\",   custom_start = NULL,   custom_end = NULL,   point_size = 2 )"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_open_trimdates_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open interactive plot — ss_open_trimdates_app","text":"dat Data frame sensor string data wide format, exported ss_compile_deployment_data(). Must include columns timestamp_, sensor_depth_at_low_tide_m, sensor_type, sensor-serial number, variables plot (e.g., temperature_degree_c). filter_to Shortcut specifying filter dat plotting. Options \"start\", \"end\", \"custom\". period Character string can converted lubridate period. Default \"2 days\". custom_start required filter_to = \"custom\". POSIXct object indicating filtered data begin. custom_end required filter_to = \"custom\". POSIXct object indicating filtered data end. point_size Size points plot.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_open_trimdates_app.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open interactive plot — ss_open_trimdates_app","text":"Opens shiny app displaying interactive plot variables   dat, coloured depth.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_parse_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract information from deployment log — ss_parse_log","title":"Extract information from deployment log — ss_parse_log","text":"function attempt parse following columns: county, waterbody,station, lease, deployment_date, retrieval_date, deployment_latitude, deployment_longitude, sensor_type, sensor_serial_number, sensor_depth_m. Missing information filled NA.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_parse_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract information from deployment log — ss_parse_log","text":"","code":"ss_parse_log(   log,   deployment_dates = TRUE,   area_info = TRUE,   sn_table = TRUE,   config = TRUE,   verbose = TRUE )"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_parse_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract information from deployment log — ss_parse_log","text":"log Log data frame, e.g., exported ss_read_log(). deployment_dates Logical argument indicating whether parse return deployment retrieval dates. area_info Logical argument indicating whether parse return location details. sn_table Logical argument indicating whether parse return serial numbers sensor depth. config Logical argument indicating whether parse return string configuration. verbose Logical argument indicating whether print messages values missing. Warnings still printed.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_parse_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract information from deployment log — ss_parse_log","text":"Returns list 4 elements. deployment_dates   data frame two columns: start_date end_date.   area_info data frame five columns: county,   waterbody, latitude, longitude, station,   lease. sn_table data frame three columns:   log_sensor (sensor name recorded log),   sensor_serial_number, depth. string_configuration   character string indicating sensor string moored.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_parse_log.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract information from deployment log — ss_parse_log","text":"Old log column names also accepted. verbose = TRUE, message printed one unique entry waterbody, station, deployment_date, retrieval_date, deployment_latitude, deployment_longitude. Entries sensor_type column must include string \"aquameasure\", \"hobo\", \"tidbit\", \"vr2ar\" (case sensitive). Warning message printed function recognize sensor log. Code stop error deployment_longitude positive value.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_pivot_longer.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot sensor string data from long to wide format — ss_pivot_longer","title":"Pivot sensor string data from long to wide format — ss_pivot_longer","text":"Pivot sensor string data long wide format","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_pivot_longer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pivot sensor string data from long to wide format — ss_pivot_longer","text":"","code":"ss_pivot_longer(dat_wide)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_pivot_longer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pivot sensor string data from long to wide format — ss_pivot_longer","text":"dat_wide Data frame sensor string data wide format, returned ss_compile_**() functions.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_pivot_longer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pivot sensor string data from long to wide format — ss_pivot_longer","text":"Returns dat long format. Variables (e.g., temperature,   dissolved, salinity, depth measured sensor) column named   variable associated measurement column named   value.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_pivot_wider.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot sensor string data from wide to long format — ss_pivot_wider","title":"Pivot sensor string data from wide to long format — ss_pivot_wider","text":"Pivot sensor string data wide long format","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_pivot_wider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pivot sensor string data from wide to long format — ss_pivot_wider","text":"","code":"ss_pivot_wider(dat_long)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_pivot_wider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pivot sensor string data from wide to long format — ss_pivot_wider","text":"dat_long Data frame sensor string data long format, returned ss_pivot_longer().","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_pivot_wider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pivot sensor string data from wide to long format — ss_pivot_wider","text":"Returns dat_long wide format, separate column   variable.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_plot_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Exports figure of variable(s) at depth over time. — ss_plot_variables","title":"Exports figure of variable(s) at depth over time. — ss_plot_variables","text":"Output compatible ggplot2 functions ggplotly(). Use ss_ggplot_variables() work functions.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_plot_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exports figure of variable(s) at depth over time. — ss_plot_variables","text":"","code":"ss_plot_variables(   dat,   title = \"\",   color_palette = NULL,   date_breaks_major = NULL,   date_breaks_minor = NULL,   date_labels_format = \"%Y-%m-%d\",   standard_do_ylims = TRUE,   standard_sal_ylims = TRUE,   yaxis_newline = TRUE,   alpha = 1,   legend_name = \"Depth (m)\",   legend_position = \"right\" )"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_plot_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exports figure of variable(s) at depth over time. — ss_plot_variables","text":"dat Water Quality data long wide format. title Title plot. Default title. color_palette Color palette hex colors onto sensor_depth_at_low_tide_m mapped. Required 6 levels sensor_depth_at_low_tide_m. Default pal = rev(viridis(6, option = \"D\")). date_breaks_major Intervals major breaks. Default selected get_xaxis_breaks(). date_breaks_minor Intervals minor breaks. Default selected get_xaxis_breaks(). date_labels_format Format date labels. Default YYYY-mm-dd. standard_do_ylims TRUE, y-limits dissolved oxygen set c(60, 130) % c(0, 15) mg/L. FALSE, y-limits set ggplot default. standard_sal_ylims TRUE, y-limits salinity set c(0, 35) PSU. FALSE, y-limits set ggplot default. yaxis_newline Logical argument indicating whether units y-axis label new line. Default TRUE. alpha Value indicating transparency points. 0 transparent; 1 opaque. legend_name Name legend. Must character string. Default legend.name = \"Depth (m)\". legend_position Position legend. Passed ggpubr. Default legend.position = \"right\".","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_plot_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exports figure of variable(s) at depth over time. — ss_plot_variables","text":"Returns * object, single figure plots variable   tidy.data stacked column returned.","code":""},{"path":[]},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_plot_variables.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Exports figure of variable(s) at depth over time. — ss_plot_variables","text":"Danielle Dempsey","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_aquameasure_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Import data from aquameasure csv files — ss_read_aquameasure_data","title":"Import data from aquameasure csv files — ss_read_aquameasure_data","text":"Import data aquameasure csv files","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_aquameasure_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import data from aquameasure csv files — ss_read_aquameasure_data","text":"","code":"ss_read_aquameasure_data(path, file_name = NULL)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_aquameasure_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import data from aquameasure csv files — ss_read_aquameasure_data","text":"path File path aquameasure folder, full path data file including file name extension. file_name Name file import, including file extension. NULL file name included path argument.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_aquameasure_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import data from aquameasure csv files — ss_read_aquameasure_data","text":"Returns data frame aquameasure data, columns   original file.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_aquameasure_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import data from aquameasure csv files — ss_read_aquameasure_data","text":"aquameasure data must saved csv format.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_aquameasure_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Import data from aquameasure csv files — ss_read_aquameasure_data","text":"Danielle Dempsey","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_hobo_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Import data from hobo or tidbit csv file — ss_read_hobo_data","title":"Import data from hobo or tidbit csv file — ss_read_hobo_data","text":"Import data hobo tidbit csv file","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_hobo_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import data from hobo or tidbit csv file — ss_read_hobo_data","text":"","code":"ss_read_hobo_data(path, file_name = NULL)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_hobo_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import data from hobo or tidbit csv file — ss_read_hobo_data","text":"path File path hobo folder, full path data file including file name extension. file_name Name file import, including file extension. NULL file name included path argument.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_hobo_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import data from hobo or tidbit csv file — ss_read_hobo_data","text":"Returns data frame hobo tidbit data, columns   original file.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_hobo_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import data from hobo or tidbit csv file — ss_read_hobo_data","text":"data must saved csv format.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_hobo_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Import data from hobo or tidbit csv file — ss_read_hobo_data","text":"Danielle Dempsey","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in deployment log — ss_read_log","title":"Read in deployment log — ss_read_log","text":"log must saved .csv, .xlsx .xls format. Value checks applied ss_parse_log().","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in deployment log — ss_read_log","text":"","code":"ss_read_log(path, parse = TRUE, verbose = TRUE)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in deployment log — ss_read_log","text":"path File path log folder, full path log file, include file name extension. function stop Error one eligible file (csv, .xlsx .xls) log folder. parse Logical argument indicating whether parse log list used ss_compile_* functions. verbose Logical argument indicating whether print messages values missing. Warnings still printed.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in deployment log — ss_read_log","text":"Returns data frame deployment metadata. Option parse   information list using ss_parse_log().","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_log.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read in deployment log — ss_read_log","text":"\"Old\" log column names converted new standard (.e.,g \"Location_Description\" replaced \"station\").","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_log_old.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract information from old deployment log — ss_read_log_old","title":"Extract information from old deployment log — ss_read_log_old","text":"Extract information old deployment log","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_log_old.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract information from old deployment log — ss_read_log_old","text":"","code":"ss_read_log_old(path, use_config = TRUE, path_config = NULL)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_log_old.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract information from old deployment log — ss_read_log_old","text":"path File path Log folder, full path log file, including file name extension. use_config Logical argument indicating whether use configuration table. Defaults water_quality_configuration_table.xslx CMAR R drive. path_config File path (including name extension) water   quality configuration table. Default   water_quality_configuration_table.xlsx tracking_sheets folder. Data   must stored xlsx file tab named \"deployments\". Columns must   Waterbody, Station_Name, Depl_Date. One one row must match   waterbody, station, deployment date recorded Log. Options   configuration column sub-surface buoy, surface buoy, attached   gear, attached fixed structure, floating dock, unknown, calval.   Use \"unknown\" entry discouraged. HINT: optimal speed, make   sure table filtered excel file. path_config argument ignored new deployment logs   appropriate entry Configuration column. Configurations recorded NA converted \"unknown\"   Warning. Configuration log deployment   found configuration table, configuration berecoreded   \"unknown\" Warning. one configuration detected log configuration   table, function stop Error.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_log_old.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract information from old deployment log — ss_read_log_old","text":"Returns list 4 elements. deployment_dates data   frame two columns: start_date (date deployment)   end_date (date retrieval). area_info data frame   five columns: county, waterbody, latitude,   longitude, station, lease. sn_table   data frame three columns: log_sensor (sensor name recorded   log), sensor_serial_number, depth (sensor depth   surface low tide, Sensor_Depth column).   string_configuration character string indicating sensor   string moored (.e., whether sensors float tide).","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_log_old.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract information from old deployment log — ss_read_log_old","text":"function deprecated. log must saved folder called Log .csv, .xlsx .xls format,   must include following columns: Deployment_Waterbody: waterbody string deployed Location_Description: station name Lease#: located aquaculture site, lease number (NA   otherwise) Deployment: deployment date, order \"Ymd\" Retrieval: retrieval date, order \"Ymd\" Logger_Latitude: latitude string deployed Logger_Longitude longitude string deployed   (must negative value) Logger_Model type sensor; see options Serial# sensor serial number Sensor_Depth: Depth sensor deployed columns ignored. Entries Logger_Model column must include string   \"aquameasure\", \"hobo\", \"tidbit\", \"vr2ar\" (case sensitive). function stop Error one eligible   file (csv, .xlsx .xls) Log folder. function stop Error   Logger_Longitude positive value. Warning message printed console function   recognize sensor log. message printed console hobo, aquameasure, vemco   sensors found log. message printed console one unique entry   Deployment_Waterbody, Location_Description,   Deployment, Retrieval, Logger_Latitude,   Logger_Longitude.","code":""},{"path":[]},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_log_old.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract information from old deployment log — ss_read_log_old","text":"Danielle Dempsey","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_nsdfa_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Import TempMetaData tab from the NSDFA tracking sheet — ss_read_nsdfa_metadata","title":"Import TempMetaData tab from the NSDFA tracking sheet — ss_read_nsdfa_metadata","text":"Import TempMetaData tab NSDFA tracking sheet","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_nsdfa_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import TempMetaData tab from the NSDFA tracking sheet — ss_read_nsdfa_metadata","text":"","code":"ss_read_nsdfa_metadata(path)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_nsdfa_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import TempMetaData tab from the NSDFA tracking sheet — ss_read_nsdfa_metadata","text":"path Path NSDFA tracking sheet (include file name extension).","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_nsdfa_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import TempMetaData tab from the NSDFA tracking sheet — ss_read_nsdfa_metadata","text":"Returns data frame NSDFA tracking sheet sensor string metadata.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_nsdfa_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import TempMetaData tab from the NSDFA tracking sheet — ss_read_nsdfa_metadata","text":"Reads TempMetaData tab NSDFA tracking sheet   corrects known errors (e.g., standardizes station waterbody spellings,   fixes deployment dates, etc.). **Might want add 2021-08-27 1042 deployment","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_vemco_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Import data from vemco csv files — ss_read_vemco_data","title":"Import data from vemco csv files — ss_read_vemco_data","text":"Import data vemco csv files","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_vemco_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import data from vemco csv files — ss_read_vemco_data","text":"","code":"ss_read_vemco_data(path, file_name)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_vemco_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import data from vemco csv files — ss_read_vemco_data","text":"path File path vemco folder, full path data file including file name extension. file_name Name file import, including file extension. NULL file name included path argument.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_vemco_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import data from vemco csv files — ss_read_vemco_data","text":"Returns data frame vemco data, columns   original file.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_vemco_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import data from vemco csv files — ss_read_vemco_data","text":"Vemco data must saved csv format.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_read_vemco_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Import data from vemco csv files — ss_read_vemco_data","text":"Danielle Dempsey","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_reformat_old_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert old data structure to sensorstrings format — ss_reformat_old_data","title":"Convert old data structure to sensorstrings format — ss_reformat_old_data","text":"Convert old data structure sensorstrings format","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_reformat_old_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert old data structure to sensorstrings format — ss_reformat_old_data","text":"","code":"ss_reformat_old_data(dat)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_reformat_old_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert old data structure to sensorstrings format — ss_reformat_old_data","text":"dat Water quality data old format.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_reformat_old_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert old data structure to sensorstrings format — ss_reformat_old_data","text":"dat formatted use sensorstrings   qaqcmar.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_set_up_folders.html","id":null,"dir":"Reference","previous_headings":"","what":"Create folders for the raw sensor string data from a given deployment — ss_set_up_folders","title":"Create folders for the raw sensor string data from a given deployment — ss_set_up_folders","text":"Create folders raw sensor string data given deployment","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_set_up_folders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create folders for the raw sensor string data from a given deployment — ss_set_up_folders","text":"","code":"ss_set_up_folders(path = NULL, station, depl_date, sensor_folders = FALSE)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_set_up_folders.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create folders for the raw sensor string data from a given deployment — ss_set_up_folders","text":"path File path deployment folder created. station Station name. depl_date Deployment start date character string. sensor_folders Logical argument indicating whether create aquameasure, hobo, log, vemco folders deployment folder. folders may also created using ss_download_data().","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_set_up_folders.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create folders for the raw sensor string data from a given deployment — ss_set_up_folders","text":"Creates folder structure storing raw sensor string data   single deployment.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_write_report_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Writes deployment table for county report — ss_write_report_table","title":"Writes deployment table for county report — ss_write_report_table","text":"Writes deployment table county report","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_write_report_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Writes deployment table for county report — ss_write_report_table","text":"","code":"ss_write_report_table(dat, keep_waterbody = FALSE)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_write_report_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Writes deployment table for county report — ss_write_report_table","text":"dat Data frame sensor string data wide format. keep_waterbody Logical value indicating whether keep Waterbody column.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_xaxis_breaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns nice major and minor breaks and label format based on timespan of the data — ss_xaxis_breaks","title":"Returns nice major and minor breaks and label format based on timespan of the data — ss_xaxis_breaks","text":"Returns nice major minor breaks label format based timespan data","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_xaxis_breaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns nice major and minor breaks and label format based on timespan of the data — ss_xaxis_breaks","text":"","code":"ss_xaxis_breaks(dat)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_xaxis_breaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns nice major and minor breaks and label format based on timespan of the data — ss_xaxis_breaks","text":"dat Data frame least one column: timestamp_utc (POSIXct).","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/ss_xaxis_breaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns nice major and minor breaks and label format based on timespan of the data — ss_xaxis_breaks","text":"Returns dataframe 1 observation 3 variables   date_breaks_major, date_breaks_minor,   date_labels_format.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/trim_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim data to specified start and end dates. — trim_data","title":"Trim data to specified start and end dates. — trim_data","text":"4 hours adde end_date account AST (e.g., case sensor retrieved 20:00 AST, 00:00 UTC **next day**)","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/trim_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim data to specified start and end dates. — trim_data","text":"","code":"trim_data(dat, start_date, end_date)"},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/trim_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim data to specified start and end dates. — trim_data","text":"dat Data frame least one column. Column name must include string \"timestamp\". start_date POSIXct/POSIXt value first good timestamp. end_date POSIXct/POSIXt value last good timestamp.","code":""},{"path":"https://dempsey-cmar.github.io/sensorstrings/reference/trim_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trim data to specified start and end dates. — trim_data","text":"Returns dat trimmed.","code":""}]
